{"name":"Angular-cms","tagline":"A light weight CMS built with Angular.js and Yeoman.","body":"# Angular CMS\r\nThis is a boilerplate CMS built with Angular, Twitter Bootstrap and Node; it is in development stage and aims to offer a quick start for creating full-stack angular application.\r\n\r\n[![Build Status](https://travis-ci.org/jonniespratley/angular-cms.png)](https://travis-ci.org/jonniespratley/angular-cms)\r\n\r\n[![Built with Grunt](https://cdn.gruntjs.com/builtwith.png)](http://gruntjs.com/)\r\n\r\n[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/jonniespratley/angular-cms/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")\r\n\r\n\r\n### Technologies\r\nSome featured technologies used in this project include the following:\r\n\r\n* **MongoDB** - The database of choice is Mongo, its fast, easy and scalable.\r\n* **NodeJS** - The server of choice is Node, its JavaScript, its fast and scalable.\r\n* **AngularJS** - The client-side framework of choice is Angular, its a full-stack, just what we need.\r\n* **Bootstrap** - The client-side ui of choice is Twitter Bootstrap, its updated and clean.\r\n* **HTML5** - Using HTML5 in every way to make a better user experience.\r\n* **Protractor** - Using Protractor for all e2e testing.\r\n* **Karma** - The test runner is Karma.\r\n\r\n\r\n\r\n## Getting Started\r\nTo get started on developing with this code base you can either fork the repository or clone it using the following command:\r\n\r\n```\r\n$ git clone https://github.com/jonniespratley/angular-cms.git\r\n```\r\n\r\n### Step 1 - Install NPM dependencies\r\nBefore you can run or build the application you need to install the dependencies, execute the following command:\r\n\r\n```\r\n$ npm install\r\n```\r\n\r\n> **Note:** You may need to run this as a `sudo` user.\r\n\r\n\r\n### Step 2 - Install Bower dependencies\r\nNow you need to install the client-side dependencies that is managed by bower, execute the following command:\r\n\r\n```\r\n$ bower install\r\n```\r\n\r\n### Step 3 - Start Grunt server\r\nNow you are ready to run the preview server that is used for development, execute the following command:\r\n\r\n```\r\n$ grunt serve\r\n```\r\n\r\n> **Note:** Your default browser should open up to [http://localhost:9000](http://localhost:9000)\r\n\r\n\r\n\r\n## Running the application\r\nTo run the application on your local machine please take the following steps.\r\n\r\n\r\n#### Step 1 - Start mongodb\r\nTo start mongodb execute the following command:\r\n\r\n\t$ sh ./bin/db.sh\r\n\t\r\n> **Note:** If errors when executing command remove the `db/mongod.lock` file. \r\n\r\n#### Step 2 - Start REST server\r\nTo start the server execute the following command:\r\n\r\n```\r\n$ node server\r\n```\r\n\r\n> **Note:** The REST server is running at [http://localhost:8181/api/v2](http://localhost:8181/api/v2)\r\n\r\n\r\n\r\n\r\n\r\n## Development\r\nThe following sections are different development tasks that I generally run while developing features.\r\n\r\n\r\n### Karma Unit Tests\r\nTo run the Karma unit tests execute the following command:\r\n\r\n```\r\n$ grunt test\r\n```\r\n\r\n### Karma e2e Scenario Tests\r\nTo run the Karma scenario tests take the following steps:\r\n\r\n1. Start Node server - `$ grunt serve`\r\n2. Start REST server - `$ node server`\r\n3. Start DB server - `$ sh bin/db.sh`\r\n4. Now run the e2e tests by executing:\r\n\r\n```\r\n$ grunt test:e2e\r\n```\r\n\r\n> **Note:** Each step is a ‘new’ terminal window\r\n\r\n\r\n### Protractor e2e Tests\r\nTo run the Protractor e2e tests take the following steps:\r\n\r\n1. Start Node server - `$ grunt serve`\r\n2. Start REST server - `$ node server`\r\n3. Start DB server - `$ sh bin/db.sh`\r\n4. Now run the Protractor tests by executing:\r\n\r\n```\r\n$ grunt protractor\r\n```\r\n\r\n> **Note:** Each step is a ‘new’ terminal window\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n---\r\n\r\n## RESTful Server\r\nThe server is a Node.js server that supports dynamic RESTful API calls to resource endpoints. It will automatically create a database if it does not exist and collection(s). \r\n\r\nThe base URL is `http://localhost:8181/api/v2`\r\n\r\n\r\nHTTP  | METHOD | ENDPOINT\r\n------------ | ------------- | ------------\r\n GET   |   findAll     |   /database/table\r\n GET   |   findById    |   /database/table/:id\r\n POST  |   add         |   /database/table\r\n PUT   |   update      |   /database/table/:id\r\n DELETE |  destroy     |   /database/table/:id\r\n\r\n> **Tip:** To create new collection open `http://localhost:8181/api/v2/[DATABASE]/[COLLECTION]` in browser.\r\n\r\n---\r\n\r\n\r\n## WebSocket Server\r\nThis is a socket server implementation for \"real\" time.\r\n\r\n\r\n### WebSocket Channels\r\nThese are the events that this socket server dispatches.\r\n\r\n\r\n1. cms:authorization\r\n2. cms:client:message\r\n3. cms:client:connect\r\n4. cms:client:disconnect\r\n5. cms:server:message\r\n6. cms:server:disconnect\r\n7. cms:server:connect\r\n\r\n\r\n---\r\n\r\n\r\n\r\n\r\n\r\n## Themes\r\nThemes will be installed via `bower`, search and install themes searching by tag `angular-cms`.\r\n\r\n### Structure of theme\r\nThis is the structure of the themes.\r\n\r\n```\r\nmy-theme/\r\n\tpackage.json\r\n\tbower.json\r\n\tcss/\r\n\t\tmy-theme.css\r\n\tjs/\r\n\t\tmy-theme.js\r\n\tindex.html\r\n\tpartials/\r\n\t\theader.html\r\n\t\tsidebar.html\r\n\t\tfooter.html\r\n\t\tcontent.html\r\n```\t\t\r\n\r\n\r\n\r\n---\r\n\r\n## Plugins\r\nPlugins will be installed via `bower`, search and install themes searching by tag `angular-cms`.\r\n\r\n### Structure of plugin\r\n\r\n\r\n---\r\n\r\n## API Documentation\r\nThe API documentation will be in the form of ngDocs style. The files located in the `content` directory are tutorial specs for the different features in this project. Documentation can be generated and viewed by running the following command:\r\n\r\n```\r\n$ grunt docs\r\n```\r\n\r\n> Your default browser should open [http://127.0.0.1:9191/#/api](http://127.0.0.1:9191/#/api)\r\n\r\n_(Coming soon)_\r\n\r\n\r\n---\r\n\r\n\r\n## Important notes\r\nPlease don't edit files in the `dist` subdirectory as they are generated via Grunt. You'll find source code in the `app` subdirectory! Regarding code style like indentation and whitespace, **follow the conventions you see used in the source already.**\r\n\r\n\r\n## Modifying the code\r\nFirst, ensure that you have the latest [Node.js](http://nodejs.org/) and [npm](http://npmjs.org/) installed.\r\n\r\nTest that Grunt's CLI and Bower are installed by running `grunt --version` and `bower --version`. \r\n\r\n1. Fork and clone the repo.\r\n1. Run `npm install` to install all build dependencies (including Grunt).\r\n1. Run `bower install` to install the front-end dependencies.\r\n1. Run `grunt` to grunt this project.\r\n\r\nAssuming that you don't see any red, you're ready to go. Just be sure to run `grunt` after making any changes, to ensure that nothing is broken.\r\n\r\n\r\n\r\n## Submitting pull requests\r\n\r\n1. Create a new branch, please don't work in your `master` branch directly.\r\n1. Add failing tests for the change you want to make. Run `grunt` to see the tests fail.\r\n1. Fix stuff.\r\n1. Run `grunt` to see if the tests pass. Repeat steps 2-3 until done.\r\n1. Update the documentation to reflect any changes.\r\n1. Push to your fork and submit a pull request.\r\n\r\n---\r\n\r\n## TODO\r\nThe following list is features that are comming.\r\n\r\n\r\n* user management & user roles\r\n* action and view permissions\r\n* content versioning and audit\r\n* some form of workflow and notifications\r\n* i18n support on literals and object versions\r\n* normalized database schema design\r\n* some form of content import-export\r\n* assets management and thumbnail generation for uploads\r\n* Valid XHTML (compressed with GZIP)\r\n* Rich text editing (e.g FCKeditor) which generates accessible markup\r\n* Valid and minified CSS and javascript (e.g using YUI)\r\n* automatically generated sitemaps.org document\r\n* integration with Google Analytics\r\n* automatic RSS feeds\r\n* open search support\r\n* print css and/or print versions of content\r\n* SEO consideration for duplicate content (e.g use of canonical tag)\r\n\r\n---\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}